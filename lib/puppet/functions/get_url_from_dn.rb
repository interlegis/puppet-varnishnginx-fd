# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# Funcao para, a partir de uma string de Distinguished Name, 
# gerar uma string de URL.
# 
# Parametros:
#   stringdn - A string contendo o Dinstinguished Name
#   baseurl  - Booleano que indica se a URL retornada inclui
#              apenas a URL base ou a URL completa. 
#              Padrao: true (URL base apenas).
# 
# Autor: Fabio Rauber
# Email: fabiorauber@gmail.com
# Data:  25/09/2014

require 'net/ldap/dn'

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'get_url_from_dn') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    stringdn = args[0]
    baseurl = true
    baseurl = args[1] unless (args[1] != true and args[1] != false)

    dn = Net::LDAP::DN.new(stringdn)
    url = ''
    dn.each_pair do |key, value|
      if baseurl == true 
        if key == 'dc' 
          url << "#{value}."
        end
      else
        if key == 'cn' or key == 'dc'
          url << "#{value}."
        end
      end
    end 
    return url.chop! if url.end_with? '.'
  
  end
end
